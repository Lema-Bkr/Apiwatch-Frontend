import { Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, Output, Renderer } from '@angular/core';

class Position {
    /**
     * @param {?} x
     * @param {?} y
     */
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
class DragAndCheckDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.allowDrag = true;
        this.moving = false;
        this.original = null;
        this.oldTrans = new Position(0, 0);
        this.tempTrans = new Position(0, 0);
        this.currentTrans = new Position(0, 0);
        this.oldZIndex = '';
        this.oldPosition = '';
        this.started = new EventEmitter();
        this.stopped = new EventEmitter();
        this.edge = new EventEmitter();
        this.allowedOffsets = new Offsets();
    }
    /**
     * @param {?} setting
     * @return {?}
     */
    set ngDraggable(setting) {
        if (setting !== undefined && setting !== null && setting !== '') {
            this.allowDrag = !!setting;
            let /** @type {?} */ element = this.handle ? this.handle : this.el.nativeElement;
            if (this.allowDrag) {
                this.renderer.setElementClass(element, 'ng-draggable', true);
            }
            else {
                this.renderer.setElementClass(element, 'ng-draggable', false);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.allowDrag) {
            let /** @type {?} */ element = this.handle ? this.handle : this.el.nativeElement;
            this.renderer.setElementClass(element, 'ng-draggable', true);
        }
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    getPosition(x, y) {
        return new Position(x, y);
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    moveTo(x, y) {
        if (this.original) {
            let /** @type {?} */ element = this.el.nativeElement;
            this.tempTrans.x = x - this.original.x;
            this.tempTrans.y = y - this.original.y;
            this.verifyMoveOnX();
            this.verifyMoveOnY();
            let /** @type {?} */ value = `translate(${this.tempTrans.x + this.oldTrans.x}px, ${this.tempTrans.y + this.oldTrans.y}px)`;
            this.renderer.setElementStyle(element, 'transform', value);
            this.renderer.setElementStyle(element, '-webkit-transform', value);
            this.renderer.setElementStyle(element, '-ms-transform', value);
            this.renderer.setElementStyle(element, '-moz-transform', value);
            this.renderer.setElementStyle(element, '-o-transform', value);
            this.edge.emit(this.boundsCheck());
            this.currentTrans = this.getPosition(this.tempTrans.x, this.tempTrans.y);
        }
    }
    /**
     * @return {?}
     */
    verifyMoveOnX() {
        let /** @type {?} */ boundaries = this.el.nativeElement.getBoundingClientRect();
        let /** @type {?} */ horizontalMove = this.tempTrans.x - this.currentTrans.x;
        let /** @type {?} */ allowedLeftOffset = this.allowedOffsets.getLeft(this.el.nativeElement, this.handle);
        if (allowedLeftOffset != null &&
            horizontalMove < 0 &&
            boundaries.left + horizontalMove < allowedLeftOffset) {
            this.tempTrans.x = this.currentTrans.x - (boundaries.left - allowedLeftOffset);
        }
        let /** @type {?} */ allowedRightOffset = this.allowedOffsets.getRight(this.el.nativeElement, this.handle);
        let /** @type {?} */ windowWidth = document.documentElement.clientWidth;
        if (allowedRightOffset != null &&
            horizontalMove > 0 &&
            boundaries.right + horizontalMove > windowWidth - allowedRightOffset) {
            this.tempTrans.x = this.currentTrans.x + (windowWidth - allowedRightOffset - boundaries.right);
        }
    }
    /**
     * @return {?}
     */
    verifyMoveOnY() {
        let /** @type {?} */ boundaries = this.el.nativeElement.getBoundingClientRect();
        let /** @type {?} */ windowHeight = document.documentElement.clientHeight;
        let /** @type {?} */ verticalMove = this.tempTrans.y - this.currentTrans.y;
        let /** @type {?} */ allowedTopOffset = this.allowedOffsets.getTop(this.el.nativeElement, this.handle);
        if (allowedTopOffset != null &&
            verticalMove < 0 &&
            boundaries.top + verticalMove < allowedTopOffset) {
            this.tempTrans.y = this.currentTrans.y - (boundaries.top - allowedTopOffset);
        }
        let /** @type {?} */ allowedBottomOffset = this.allowedOffsets.getBottom(this.el.nativeElement, this.handle);
        if (allowedBottomOffset != null &&
            verticalMove > 0 &&
            boundaries.bottom + verticalMove > windowHeight - allowedBottomOffset) {
            this.tempTrans.y = this.currentTrans.y + (windowHeight - allowedBottomOffset - boundaries.bottom);
        }
    }
    /**
     * @return {?}
     */
    pickUp() {
        // get old z-index and position:
        this.oldZIndex = this.el.nativeElement.style.zIndex ? this.el.nativeElement.style.zIndex : '';
        this.oldPosition = this.el.nativeElement.style.position ? this.el.nativeElement.style.position : '';
        this.getPosition(0, 0);
        if (window) {
            this.oldZIndex = window.getComputedStyle(this.el.nativeElement, null).getPropertyValue('z-index');
            this.oldPosition = window.getComputedStyle(this.el.nativeElement, null).getPropertyValue('position');
        }
        // setup default position:
        let /** @type {?} */ position = 'relative';
        // check if old position is draggable:
        if (this.oldPosition && (this.oldPosition === 'absolute' ||
            this.oldPosition === 'fixed' ||
            this.oldPosition === 'relative')) {
            position = this.oldPosition;
        }
        this.renderer.setElementStyle(this.el.nativeElement, 'position', position);
        this.renderer.setElementStyle(this.el.nativeElement, 'z-index', '99999');
        if (!this.moving) {
            this.started.emit(this.el.nativeElement);
            this.moving = true;
        }
    }
    /**
     * @return {?}
     */
    boundsCheck() {
        if (!this.bounds) {
            return {
                'top': false,
                'right': false,
                'bottom': false,
                'left': false
            };
        }
        let /** @type {?} */ boundary = this.bounds.getBoundingClientRect();
        let /** @type {?} */ elem = this.el.nativeElement.getBoundingClientRect();
        return {
            'top': boundary.top < elem.top,
            'right': boundary.right > elem.right,
            'bottom': boundary.bottom > elem.bottom,
            'left': boundary.left < elem.left
        };
    }
    /**
     * @return {?}
     */
    putBack() {
        if (this.oldZIndex) {
            this.renderer.setElementStyle(this.el.nativeElement, 'z-index', this.oldZIndex);
        }
        else {
            this.el.nativeElement.style.removeProperty('z-index');
        }
        if (this.moving) {
            this.stopped.emit(this.el.nativeElement);
            this.edge.emit(this.boundsCheck());
            this.moving = false;
            this.oldTrans.x += this.tempTrans.x;
            this.oldTrans.y += this.tempTrans.y;
            this.tempTrans.x = this.tempTrans.y = 0;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        // 1. skip right click;
        // 2. if handle is set, the element can only be moved by handle
        if (event.button == 2 || (this.handle !== undefined && event.target !== this.handle)) {
            return;
        }
        this.original = this.getPosition(event.clientX, event.clientY);
        this.pickUp();
    }
    /**
     * @return {?}
     */
    onMouseUp() {
        this.putBack();
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.putBack();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        if (this.moving && this.allowDrag) {
            this.moveTo(event.clientX, event.clientY);
        }
    }
    /**
     * @return {?}
     */
    onTouchEnd() {
        this.putBack();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.handle !== undefined && event.target !== this.handle) {
            return;
        }
        this.original = this.getPosition(event.changedTouches[0].clientX, event.changedTouches[0].clientY);
        this.pickUp();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchMove(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.moving && this.allowDrag) {
            this.moveTo(event.changedTouches[0].clientX, event.changedTouches[0].clientY);
        }
    }
}
DragAndCheckDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngDraggable]'
            },] },
];
/**
 * @nocollapse
 */
DragAndCheckDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
DragAndCheckDirective.propDecorators = {
    'started': [{ type: Output },],
    'stopped': [{ type: Output },],
    'edge': [{ type: Output },],
    'handle': [{ type: Input },],
    'bounds': [{ type: Input },],
    'allowedOffsets': [{ type: Input },],
    'ngDraggable': [{ type: Input },],
    'onMouseDown': [{ type: HostListener, args: ['mousedown', ['$event'],] },],
    'onMouseUp': [{ type: HostListener, args: ['document:mouseup',] },],
    'onMouseLeave': [{ type: HostListener, args: ['document:mouseleave',] },],
    'onMouseMove': [{ type: HostListener, args: ['document:mousemove', ['$event'],] },],
    'onTouchEnd': [{ type: HostListener, args: ['document:touchend',] },],
    'onTouchStart': [{ type: HostListener, args: ['touchstart', ['$event'],] },],
    'onTouchMove': [{ type: HostListener, args: ['document:touchmove', ['$event'],] },],
};
class Offsets {
    /**
     * @param {?=} top
     * @param {?=} right
     * @param {?=} bottom
     * @param {?=} left
     */
    constructor(top = Offsets.NONE, right = Offsets.NONE, bottom = Offsets.NONE, left = Offsets.NONE) {
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }
    /**
     * @param {?} el
     * @param {?=} handle
     * @return {?}
     */
    getTop(el, handle) {
        return this.computeOffset(this.top, el, handle);
    }
    /**
     * @param {?} el
     * @param {?=} handle
     * @return {?}
     */
    getRight(el, handle) {
        return this.computeOffset(this.right, el, handle);
    }
    /**
     * @param {?} el
     * @param {?=} handle
     * @return {?}
     */
    getBottom(el, handle) {
        return this.computeOffset(this.bottom, el, handle);
    }
    /**
     * @param {?} el
     * @param {?=} handle
     * @return {?}
     */
    getLeft(el, handle) {
        return this.computeOffset(this.left, el, handle);
    }
    /**
     * @param {?} value
     * @param {?} el
     * @param {?} handle
     * @return {?}
     */
    computeOffset(value, el, handle) {
        let /** @type {?} */ result = null;
        if (!isNaN(+value)) {
            result = +value;
        }
        else {
            switch (value) {
                case Offsets.BORDER: {
                    result = 0;
                    break;
                }
                case Offsets.HALF_WIDTH: {
                    result = this.computeHALF(el);
                    break;
                }
                case Offsets.HALF_WIDTH: {
                    result = this.computeHALF(el);
                    break;
                }
                case Offsets.HANDLE_HEIGHT: {
                    result = this.computeHANDLE(el, handle);
                    break;
                }
                default: 
            }
        }
        return result;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    computeHALF(el) {
        return -el.getBoundingClientRect().width / 2;
    }
    /**
     * @param {?} el
     * @param {?} handle
     * @return {?}
     */
    computeHANDLE(el, handle) {
        if (!handle) {
            return 0;
        }
        let /** @type {?} */ contentHeight = el.getBoundingClientRect().height;
        return handle.getBoundingClientRect().height - contentHeight;
    }
}
Offsets.NONE = 'none';
Offsets.BORDER = 'border';
Offsets.HALF_WIDTH = 'half';
Offsets.HANDLE_HEIGHT = 'handle';

class DragAndCheckModule {
}
DragAndCheckModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DragAndCheckDirective],
                exports: [DragAndCheckDirective]
            },] },
];
/**
 * @nocollapse
 */
DragAndCheckModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { DragAndCheckModule, DragAndCheckDirective, Offsets };
//# sourceMappingURL=ng2-drag-and-check.js.map
